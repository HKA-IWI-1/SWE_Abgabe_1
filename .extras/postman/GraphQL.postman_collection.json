{
	"info": {
		"_postman_id": "bac9c2ae-6527-404f-b881-451ba4ed276d",
		"name": "GraphQL",
		"description": "GraphQL-Schnittstelle",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32397580"
	},
	"item": [
		{
			"name": "Query",
			"item": [
				{
					"name": "Suche Film mit ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Body mit den Properties', () => {\r",
									"//\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($id: ID! = \"1\") {\r\n  film(id: $id) {\r\n    id\r\n    version\r\n    titel \r\n    bewertung \r\n    preis\r\n    veroeffentlichungsdatum \r\n    imdbEintrag\r\n    genres\r\n    anbieter \r\n    produktionsstudio {\r\n      name\r\n    }\r\n    rabatt(short: true)\r\n  }\r\n}",
								"variables": "{\r\n  \"id\": \"1\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche alle Filme mit version, titel und Produktionsstudio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Body mit den Properties', () => {\r",
									"//\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  filme {\r\n    version\r\n    titel \r\n    produktionsstudio {\r\n      name\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche Filme von Produktionsstudio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Body mit den Properties', () => {\r",
									"//\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($name: String = \"Pinewood Studios\") {\r\n  filme(suchkriterien: {produktionsstudio: $name}) {\r\n    id\r\n    version\r\n    titel \r\n    bewertung \r\n    preis\r\n    veroeffentlichungsdatum \r\n    imdbEintrag\r\n    genres\r\n    anbieter \r\n    produktionsstudio {\r\n      name\r\n    }\r\n    rabatt(short: true)\r\n  }\r\n}",
								"variables": "{\r\n  \"name\": \"Pinewood Studios\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von Filmen mit nicht-vorhandenem Produktionsstudio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Body mit Errors', () => {\r",
									"//\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($name: String = \"Nichtvorhanden\") {\r\n  filme(suchkriterien: {produktionsstudio: $name}) {\r\n    titel\r\n  }\r\n}",
								"variables": "{\r\n  \"name\": \"Nichtvorhanden\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von FIlmen mit Bewertung 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Body mit den Properties', () => {\r",
									"//\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($bewertung: Int = 3) {\r\n  filme(suchkriterien: {bewertung: $bewertung}) {\r\n    titel\r\n    bewertung\r\n    produktionsstudio {\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"bewertung\": 3\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche Filme mit ungÃ¼ltiger Bewertung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Body mit Errors', () => {\r",
									"//\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($bewertung: Int = 99) {\r\n  filme(suchkriterien: {bewertung: $bewertung}) {\r\n    titel\r\n  }\r\n}",
								"variables": "{\r\n  \"bewertung\": 99\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Queries mit der GraphQL-Schnittstelle"
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login als admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit Token und Rollen', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { access_token, expires_in, roles } = body.data.login;\r",
									"    pm.expect(access_token).to.be.a('string').that.matches(/.+\\..+\\..+/u);\r",
									"    pm.expect(expires_in).to.be.a('number');\r",
									"    pm.expect(roles).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    login(username: \"admin\", password: \"p\") {\r\n        access_token\r\n        expires_in\r\n        refresh_token\r\n        refresh_expires_in\r\n        roles\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    refresh(refresh_token: \"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3NDg1ODZmNi1iYjg5LTQ0MGEtYmFiNi01NGFlYWZmOGQ1ZjgifQ.eyJleHAiOjE3MDYzNzQ5OTMsImlhdCI6MTcwNjM3MTM5MywianRpIjoiN2IyMGRlOWItNTI0Ny00NDczLThlNjAtYzIwNjk5NjZhOWE5IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9hY21lIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9hY21lIiwic3ViIjoiZjkxNTZhYmYtNmRhNS00OGJmLWJjMWMtODEzM2FhZTI3NDE0IiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImJ1Y2gtY2xpZW50Iiwic2Vzc2lvbl9zdGF0ZSI6Ijc0OWE5ZGI3LWFhMjgtNDA1YS1hYzU5LWI1ZGE3OGM5MDFiNCIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJzaWQiOiI3NDlhOWRiNy1hYTI4LTQwNWEtYWM1OS1iNWRhNzhjOTAxYjQifQ.X9FiLztLxqy9u4bEt6OAdUT8TsmEiWqs9oeQskT2ONo\") {\r\n        access_token\r\n        expires_in\r\n        refresh_token\r\n        refresh_expires_in\r\n        roles\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login mit falschem Passwort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit Fehlermeldung', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const error = errors[0];\r",
									"    const { message, path, extensions } = error;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Passwort');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('login');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    login(username: \"admin\", password: \"FALSCH\") {\r\n        access_token\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Login mit der GraphQL-Schnittstelle"
		},
		{
			"name": "Mutation",
			"item": [
				{
					"name": "Neuer Film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { data } = body;\r",
									"    pm.expect(data.create.id).to.be.a('number').that.is.gte(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  create(\r\n    input: {\r\n        titel: \"Mutating Tutorial\"\r\n        bewertung: 5\r\n        preis: 12.99\r\n        rabatt: 0.123\r\n        veroeffentlichungsdatum:  \"2024-01-02\",\r\n        imdbEintrag:  \"https://www.imdb.com/title/ty0037423/\"\r\n        genres: [\"Thriller\"],\r\n        anbieter: NETFLIX\r\n        produktionsstudio: {\r\n            name: \"Constantin Film\"\r\n        }\r\n        produzenten: [{\r\n            vorname: \"Frank\",\r\n            nachname: \"MÃ¼ller\"\r\n        }]\r\n    }\r\n    ) {\r\n      id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "neuer Film mit ungÃ¼ltigen Daten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Fehlermeldungen im Response Body', () => {\r",
									"\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  create(\r\n    input: {\r\n      titel: \"Mutating Tutorial\"\r\n      bewertung: 20\r\n      preis: -200\r\n      rabatt: 0\r\n      veroeffentlichungsdatum:  \"2024-2104-3231\",\r\n      imdbEintrag:  \"https://www.imdb.com/title/ty0057423/\"\r\n      genres: [\"Thriller\"],\r\n      anbieter: BAMBUS\r\n      produktionsstudio: {\r\n          name: \"Constantin Film\"\r\n      }\r\n      produzenten: [{\r\n          vorname: \"Frank\",\r\n          nachname: \"MÃ¼ller\"\r\n      }]\r\n    }\r\n    ) {\r\n      id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Film mit ID 4 aktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit aktualisierter Versionsnummer', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { data } = body;\r",
									"    pm.expect(data.update.version).to.be.a('number').that.is.gte(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  update(\r\n    input: {\r\n        id: \"4\",\r\n        version: 0,\r\n        titel: \"Updating Tutorial\"\r\n        bewertung: 3\r\n        preis: 20.99\r\n        rabatt: 0.012\r\n        veroeffentlichungsdatum:  \"2024-04-22\",\r\n        imdbEintrag:  \"https://www.imdb.com/title/ty0037573/\"\r\n        genres: [\"Dokumentation\"],\r\n        anbieter: AMAZON,\r\n    }\r\n    ) {\r\n        version\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Film mit ID 4 mit ungÃ¼ltigen Daten aktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"// pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    \r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  update(\r\n    input: {\r\n        id: \"4\",\r\n        version: 0,\r\n        titel: \"SUPER FAKE MOVIE\"\r\n        bewertung: 22\r\n        preis: -10000\r\n        rabatt: 0\r\n        veroeffentlichungsdatum:  \"2024-42304-322\",\r\n        imdbEintrag:  \"nÃ¶\"\r\n        genres: [\"Dokumentation\"],\r\n        anbieter: AMAZON\r\n    }\r\n    ) {\r\n        version\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht-Vorhandenen Film aktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string').that.includes('999999');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('update');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  update(\r\n    input: {\r\n        id: \"49999\",\r\n        version: 0,\r\n        titel: \"Updating Tutorial\"\r\n        bewertung: 3\r\n        preis: 20.99\r\n        rabatt: 0.012\r\n        veroeffentlichungsdatum:  \"2024-04-22\",\r\n        imdbEintrag:  \"https://www.imdb.com/title/ty0037573/\"\r\n        genres: [\"Dokumentation\"],\r\n        anbieter: AMAZON\r\n    }\r\n    ) {\r\n        version\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Film mit ID 5 lÃ¶schen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { data } = body;\r",
									"    pm.expect(data.delete).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  delete(id: \"5\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Neuanlegen, Ãndern und LÃ¶schen mit der GraphQL-Schnittstelle",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: 'https://localhost:3000/graphql',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: JSON.stringify({",
							"        query: `",
							"            mutation {",
							"                login(username: \"admin\", password: \"p\") {",
							"                    access_token",
							"                }",
							"            }",
							"        `",
							"    })",
							"}, (err, res) => {",
							"    pm.collectionVariables.set('TOKEN', res.json().data.login.access_token);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "graphql_url",
			"value": "{{base_url}}/graphql",
			"type": "string"
		},
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		}
	]
}