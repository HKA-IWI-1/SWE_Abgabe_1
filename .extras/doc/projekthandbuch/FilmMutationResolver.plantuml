' Copyright (c) 2024 - present Florian Sauer
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
' documentation files (the “Software”), to deal in the Software without restriction, including without limitation the
' rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all copies or substantial portions
' of the Software.
'
' THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
' LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
' IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
' WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
' SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package film #DDDDDD {
  package entity #FFFFFF {
    class Film <<entity>>
  }

  package service #FFFFFF {
    class FilmWriteService << control >>
  }

  class "type FilmDTO = Omit<Film, 'produzenten' | 'aktualisiert' | 'erzeugt' | 'rabatt'" as FilmDTO
  hide FilmDTO circle

    interface IdInput {
        id: number
    }

  class FilmMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() filmDTO: FilmDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() filmDTO: FilmDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  FilmMutationResolver o-down-> "1" FilmWriteService : service

  FilmMutationResolver ..> Film
  FilmMutationResolver ..> FilmDTO
  FilmMutationResolver ..> IdInput
  FilmDTO .up.> Film
  FilmMutationResolver ..> Promise
  FilmMutationResolver ..> Resolver

  FilmMutationResolver .up.> AuthGuard
  FilmMutationResolver .up.> Roles

  FilmDTO .[hidden].> Promise
  FilmDTO .[hidden].> Resolver
}

hide empty members

footer (c) Florian Sauer

@enduml
